{
	"git_url": "https://github.com/cisocrgroup/cis-ocrd-py",
	"version": "0.0.1",
	"tools": {
		"ocrd-cis-aio": {
			"executable": "ocrd-cis-aio",
			"categories": [
				"Text recognition and optimization"
			],
			"steps": [
				"postprocessing/alignment/recognition"
			],
			"description": "All in One Tool",
			"parameters": {
				"tesserparampath": {
					"type": "string",
					"required": true
				},
				"ocropyparampath1": {
					"type": "string",
					"required": true
				},
				"ocropyparampath2": {
					"type": "string",
					"required": true
				},
				"alignparampath": {
					"type": "string",
					"required": true
				}
			}
		},
		"ocrd-cis-align": {
			"executable": "ocrd-cis-align",
			"categories": [
				"Text recognition and optimization"
			],
			"steps": [
				"postprocessing/alignment"
			],
			"description": "Align multiple OCRs and/or GTs"
		},
		"ocrd-cis-ocropy-binarize": {
			"executable": "ocrd-cis-ocropy-binarize",
			"categories": [
				"Image preprocessing"
			],
			"steps": [
				"preprocessing/optimization/binarization",
				"preprocessing/optimization/grayscale_normalization",
				"preprocessing/optimization/deskewing"
			],
			"input_file_grp": [
				"OCR-D-IMG",
				"OCR-D-SEG-BLOCK",
				"OCR-D-SEG-LINE"
			],
			"output_file_grp": [
				"OCR-D-IMG-BIN",
				"OCR-D-SEG-BLOCK",
				"OCR-D-SEG-LINE"
			],
			"description": "Binarize (and optionally deskew/despeckle) pages / regions / lines with ocropy",
			"parameters": {
				"method": {
					"type": "string",
					"enum": ["none", "global", "otsu", "gauss-otsu", "ocropy"],
					"description": "binarization method to use (only ocropy will include deskewing)",
					"default": "ocropy"
				},
				"grayscale": {
					"type": "boolean",
					"description": "for the ocropy method, produce grayscale-normalized instead of thresholded image",
					"default": false
				},
				"maxskew": {
					"type": "number",
					"description": "modulus of maximum skewing angle to detect (larger will be slower, 0 will deactivate deskewing)",
					"default": 0.0
				},
				"noise_maxsize": {
					"type": "number",
					"description": "maximum pixel number for connected components to regard as noise (0 will deactivate denoising)",
					"default": 0
				},
				"level-of-operation": {
					"type": "string",
					"enum": ["page", "region", "line"],
					"description": "PAGE XML hierarchy level granularity to annotate images for",
					"default": "page"
				}
			}
		},
		"ocrd-cis-ocropy-deskew": {
			"executable": "ocrd-cis-ocropy-deskew",
			"categories": [
				"Image preprocessing"
			],
			"steps": [
				"preprocessing/optimization/deskewing"
			],
			"input_file_grp": [
				"OCR-D-SEG-BLOCK",
				"OCR-D-SEG-LINE"
			],
			"output_file_grp": [
				"OCR-D-SEG-BLOCK",
				"OCR-D-SEG-LINE"
			],
			"description": "Deskew regions with ocropy (by annotating orientation angle and adding AlternativeImage)",
			"parameters": {
				"maxskew": {
					"type": "number",
					"description": "modulus of maximum skewing angle to detect (larger will be slower, 0 will deactivate deskewing)",
					"default": 5.0
				},
				"level-of-operation": {
					"type": "string",
					"enum": ["page", "region"],
					"description": "PAGE XML hierarchy level granularity to annotate images for",
					"default": "region"
				}
			}
		},
		"ocrd-cis-ocropy-denoise": {
			"executable": "ocrd-cis-ocropy-denoise",
			"categories": [
				"Image preprocessing"
			],
			"steps": [
				"preprocessing/optimization/despeckling"
			],
			"input_file_grp": [
				"OCR-D-IMG",
				"OCR-D-SEG-BLOCK",
				"OCR-D-SEG-LINE"
			],
			"output_file_grp": [
				"OCR-D-IMG-DESPECK",
				"OCR-D-SEG-BLOCK",
				"OCR-D-SEG-LINE"
			],
			"description": "Despeckle pages / regions / lines with ocropy",
			"parameters": {
				"noise_maxsize": {
					"type": "number",
					"format": "float",
					"description": "maximum size in points (pt) for connected components to regard as noise (0 will deactivate denoising)",
					"default": 3.0
				},
				"level-of-operation": {
					"type": "string",
					"enum": ["page", "region", "line"],
					"description": "PAGE XML hierarchy level granularity to annotate images for",
					"default": "page"
				}
			}
		},
		"ocrd-cis-ocropy-clip": {
			"executable": "ocrd-cis-ocropy-clip",
			"categories": [
				"Layout analysis"
			],
			"steps": [
				"layout/segmentation/region",
				"layout/segmentation/line"
			],
			"input_file_grp": [
				"OCR-D-SEG-BLOCK",
				"OCR-D-SEG-LINE"
			],
			"output_file_grp": [
				"OCR-D-SEG-BLOCK",
				"OCR-D-SEG-LINE"
			],
			"description": "Clip text regions / lines at intersections with neighbours",
			"parameters": {
				"level-of-operation": {
					"type": "string",
					"enum": ["region", "line"],
					"description": "PAGE XML hierarchy level granularity to annotate images for",
					"default": "region"
				},
				"min_fraction": {
					"type": "number",
					"format": "float",
					"description": "share of foreground pixels that must be retained by the largest label",
					"default": 0.7
				}
			}
		},
		"ocrd-cis-ocropy-resegment": {
			"executable": "ocrd-cis-ocropy-resegment",
			"categories": [
				"Layout analysis"
			],
			"steps": [
				"layout/segmentation/line"
			],
			"input_file_grp": [
				"OCR-D-SEG-LINE"
			],
			"output_file_grp": [
				"OCR-D-SEG-LINE"
			],
			"description": "Resegment lines with ocropy (by shrinking annotated polygons)",
			"parameters": {
				"min_fraction": {
					"type": "number",
					"format": "float",
					"description": "share of foreground pixels that must be retained by the largest label",
					"default": 0.8
				},
				"extend_margins": {
					"type": "number",
					"format": "integer",
					"description": "number of pixels to extend the input polygons horizontally and vertically before intersecting",
					"default": 3
				}
			}
		},
		"ocrd-cis-ocropy-dewarp": {
			"executable": "ocrd-cis-ocropy-dewarp",
			"categories": [
				"Image preprocessing"
			],
			"steps": [
				"preprocessing/optimization/dewarping"
			],
			"description": "Dewarp line images with ocropy",
			"input_file_grp": [
				"OCR-D-SEG-LINE"
			],
			"output_file_grp": [
				"OCR-D-SEG-LINE"
			],
			"parameters": {
				"range": {
					"type": "number",
					"description": "maximum vertical disposition or maximum margin (will be multiplied by mean centerline deltas to yield pixels)",
					"default": 4
				}
			}
		},
		"ocrd-cis-ocropy-recognize": {
			"executable": "ocrd-cis-ocropy-recognize",
			"categories": [
				"Text recognition and optimization"
			],
			"steps": [
				"recognition/text-recognition"
			],
			"description": "Recognize text in (binarized+deskewed+dewarped) lines with ocropy",
			"input_file_grp": [
				"OCR-D-SEG-LINE",
				"OCR-D-SEG-WORD",
				"OCR-D-SEG-GLYPH"
			],
			"output_file_grp": [
				"OCR-D-OCR-OCRO"
			],
			"parameters": {
				"textequiv_level": {
					"type": "string",
					"enum": ["line", "word", "glyph"],
					"description": "PAGE XML hierarchy level granularity to add the TextEquiv results to",
					"default": "line"
				},
				"model": {
					"type": "string",
					"description": "ocropy model to apply (e.g. fraktur.pyrnn)"
				}
			}
		},
		"ocrd-cis-ocropy-rec": {
			"executable": "ocrd-cis-ocropy-rec",
			"categories": [
				"Text recognition and optimization"
			],
			"steps": [
				"recognition/text-recognition"
			],
			"description": "Recognize text snippets",
			"parameters": {
				"model": {
					"type": "string",
					"description": "ocropy model to apply (e.g. fraktur.pyrnn)"
				}
			}
		},
		"ocrd-cis-ocropy-segment": {
			"executable": "ocrd-cis-ocropy-segment",
			"categories": [
				"Layout analysis"
			],
			"steps": [
				"layout/segmentation/region",
				"layout/segmentation/line"
			],
			"input_file_grp": [
				"OCR-D-GT-SEG-BLOCK",
				"OCR-D-SEG-BLOCK"
			],
			"output_file_grp": [
				"OCR-D-SEG-LINE"
			],
			"description": "Segment pages into regions or regions into lines with ocropy",
			"parameters": {
				"level-of-operation": {
					"type": "string",
					"enum": ["page", "region"],
					"description": "PAGE XML hierarchy level to read images from",
					"default": "region"
				},
				"maxcolseps": {
					"type": "number",
					"format": "integer",
					"default": 2,
					"description": "number of white/background column separators to try (when operating on the page level)"
				},
				"maxseps": {
					"type": "number",
					"format": "integer",
					"default": 5,
					"description": "number of black/foreground column separators to try, counted individually as lines (when operating on the page level)"
				},
				"overwrite_regions": {
					"type": "boolean",
					"default": true,
					"description": "remove any existing TextRegion elements (when operating on the page level)"
				},
				"overwrite_lines": {
					"type": "boolean",
					"default": true,
					"description": "remove any existing TextLine elements (when operating on the region level)"
				},
				"spread": {
					"type": "number",
					"format": "float",
					"default": 2.4,
					"description": "distance in points (pt) from the foreground to project text line (or text region) labels into the background"
				}
			}
		},
		"cis-ocrd-ocropy-train": {
			"executable": "ocrd-cis-ocropy-train",
			"categories": [
				"lstm ocropy model training"
			],
			"steps": [
				"training"
			],
			"description": "train model with ground truth from mets data",
			"parameters": {
				"textequiv_level": {
					"type": "string",
					"enum": ["line", "word", "glyph"],
					"default": "line"
				},
				"model": {
					"type": "string",
					"description": "load model or crate new one (e.g. fraktur.pyrnn)"
				},
				"ntrain": {
					"type": "integer",
					"description": "lines to train before stopping",
					"default": 1000000
				},
				"outputpath": {
					"type": "string",
					"description": "(existing) path for the trained model"
				}
			}
		},
		"ocrd-cis-profile": {
			"executable": "ocrd-cis-profile",
			"categories": [
				"Text recognition and optimization"
			],
			"steps": [
				"postprocessing/alignment"
			],
			"description": "Add a correction suggestions and suspicious tokens (profile)",
			"parameters": {
				"executable": {
					"type": "string",
					"required": true
				},
				"backend": {
					"type": "string",
					"required": true
				},
				"language": {
				    "type": "string",
					"required": false,
					"default": "german"
				},
				"additionalLexicon": {
					"type": "string",
					"required": false,
					"default": ""
				}
			}
		},
		"ocrd-cis-train": {
			"executable": "ocrd-cis-train",
			"categories": [
				"Text recognition and optimization"
			],
			"steps": [
				"postprocessing/alignment"
			],
			"description": "Train post correction model",
			"parameters": {
				"jar": {
					"type": "string",
					"required": true
				}
			}
		},
		"ocrd-cis-stats": {
			"executable": "ocrd-cis-stats",
			"categories": [
				"Text recognition and optimization"
			],
			"steps": [
				"postprocessing/alignment"
			],
			"description": "Get Precision of aligned ocrs",
			"parameters": {
				"none": {
					"type": "string"
				}
			}
		},
		"ocrd-cis-lang": {
			"executable": "ocrd-cis-lang",
			"categories": [
				"Text recognition and optimization"
			],
			"steps": [
				"postprocessing/alignment"
			],
			"description": "Get language and font of input-file-group",
			"parameters": {
				"none": {
					"type": "string"
				}
			}
		},
		"ocrd-cis-importer": {
			"executable": "ocrd-cis-importer",
			"categories": [
				"Text recognition and optimization"
			],
			"steps": [
				"postprocessing"
			],
			"description": "different ocropy tool",
			"parameters": {
				"none": {
					"type": "string"
				}
			}
		},
		"ocrd-cis-cutter": {
			"executable": "ocrd-cis-cutter",
			"categories": [
				"Text recognition and optimization"
			],
			"steps": [
				"postprocessing"
			],
			"description": "cut lines from input-file-groups",
			"parameters": {
				"gtdir": {
					"type": "string"
				}
			}
		},
		"ocrd-cis-clean": {
			"executable": "ocrd-cis-clean",
			"categories": [
				"Text recognition and optimization"
			],
			"steps": [
				"postprocessing"
			],
			"description": "clean-up-tool",
			"parameters": {
				"mainLevel": {
					"type": "string",
					"enum": ["line", "word", "glyph"],
					"default": "line"
				},
				"mainIndex": {
					"type": "integer",
					"description": "model index"
				}
			}
		}
	}
}
